"LightmappedGeneric"
{
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//      ___ ___  _      ___   __  ____     _       _ __   __  __  __        ___ _  _ ___ __  _ 
//    / __|   __| |  |    |   __|/ __|  _   _|    \ \   / / _ \  |   |  |   |   _ \    / __|   |/ /_  _| |  \ | |
//    \__ \   _|  |  |__|   _|     (__   |  |         \ V /  (_)   |   |_|   |      /    \__ \ ' <    |  |   | . `  |
//    |___/___|  |___|___\ ___|   |_|           |_| \___/ \_ __/|_| _\    |___/_|\_\__|  |_|\_|
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ++++++++++   ENTITY VERSION (Survivors/Guns/Items/Infected) - COLOR RNG ++++++++++ 
//
//  By Ellie, ask your questions here : https://steamcommunity.com/id/ellie_williams/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	$color				"[1 1 1]"
	$blendtintbybasealpha 		"1"	

// ---------------------------------------------- USER VARIABLES	// All these variables are just defaulted, the code will use the user set values

	$slotUsed			"0"		// The user can change this variable to set the slot that will be used	
	$slotUsedFrame		"0"		// The user can change this variable to set the slot that will be used for $frame	

	$oneSkinPerMap		"0"		// The user can change this variable to only allow one skin per map

	$VMTColorOffset		"0"		// The user can change this to change what clothes randomize together or not
	$speedColorFactor		"1"		// The bigger the number, the faster the color will scroll (minimum = 1)

	$activateEXTR		"0"		// The user can activate this thing to also randomize the $basetexture frame albedo (RNG)

	$activateColorRNG		"1"
	$originalColor		"[1 1 1]"	
		
// .................................................................................

	$detail			"models\infected\hunter\hunter_01_detail"

	$ScaleBlood		"0.5"
	$canOnlyGetWorse		"0"

// ---------------------------------------------- RNG

	$checkMax		"0.0"
	$maxFrame		"0.0"
	$maxFramePlusOne		"1.0"
	$countingFinished		"0.0"

	$randEXTR		"0.0"
	$randEXTRStored		"0.0"
	$randEXTRInject		"0.0"
	$randEXTROverflow	"0.0"
	$injectEXTR		"0.0"
	$RNGframeEXTR		"0.0"
	
	$rerollRaw		"0"
	$rerollRawStored		"0"
	$rerollRNG		"0"

	$randSYS		"0.0"
	$randSYSTemp		"0.0"
	$randSYSOverflow		"0.0"

	$ramp			"0"
		
	$prepareStore		"1000.0"
	$randSYSStored		"1000.0"
	$randSYSInject		"0.0"

	$roundOffset		"0.05"
	$randOffset		"1000.0"
	$randOffsetDIV		"100.0"

	$injectColor		"0.0"
	$RNGInjectColor		"0.0"

	$colorReds		"0.0"
	$colorGreens		"0.0"
	$colorBlues		"0.0"

// ---------------------------------------------- SYS

	$masterToggle		"1"
	$blockRawData		"0.0"

	$tempDIV			"0.0"
	$tempMULT		"0.0"
	$tempFRAC		"0.0"
	$tempOFFSET		"0.05"
	$SYSInjectColor		"0.0"
	$SYSInjectFrame		"0.0"

// ---------------------------------------------- Injector

	$CHOSENinjectColor	"0"
	$CHOSENinjectFrame	"0"
	$forceSYS		"0"
	$keepColorCheck		"0"

// ---------------------------------------------- Slots & Numbers

	$slot1			"0.0"
	$slot2			"0.0"
	$slot3			"0.0"
	$slot4			"0.0"
	$slot5			"0.0"
	$slot6			"0.0"
	$slot7			"0.0"
	$slot8			"0.0"
	$slot9			"0.0"
	$slot10			"0.0"
	$slot11			"0.0"
	$slot12			"0.0"
	$slot13			"0.0"
	$slot14			"0.0"
	$slot15			"0.0"
	$slot16			"0.0"
	$slot17			"0.0"
	$slot18			"0.0"
	$slot19			"0.0"
	$slot20			"0.0"
	$slot21			"0.0"


	$mo			"-1"
	$zero			"0.0"
	$one			"1.0"
	$two			"2.0"
	$three			"3"
	$four			"4"
	$five			"5"
	$six			"6"
	$seven			"7"
	$eight			"8"
	$nine			"9"
	$ten			"10"
	$eleven			"11"
	$twelve			"12"
	$thirteen			"13"
	$fourteen			"14"
	$fifteen			"15"
	$sixteen			"16"
	$seventeen		"17"
	$eighteen			"18"
	$nineteen			"19"
	$twenty			"20"
	$oh			"100"
	$tff			"255"
	$fh			"500"
	$nnn			"999"
	$ot			"1000"

// ---------------------------------------------- REALISTIC DAMAGE VARIABLES

	$CenterDET		"0.5"

	$pos 			"[0 0 0]"

	$posX			.0
	$posXDELTA		.0
	$posXStored		.0
	$posY			.0
	$posYDELTA		.0
	$posYStored		.0

	$entityorigin		"[0 0 0]"
	$posTOLERANCE		600.0
	$isNearTheStart		"0"

	$healthCurrent		"100"
	$worstHealth		"100"
	$healthPercent		"100"

	$hasTakenDamage		"0"

	$noInjectWorstHealth	0	
	$worstHealthToInject	0	
	$mustHeal		0	
		
	$mapRestartTPK		0	

	$ismoving			0
	$playerSpeed		0

	$dbftoInvert		"0"
	$dbftodisplay		"0"
	$dbftoinject		"0"

	$isdown			"0"	
	$isEntity			"0"

Proxies
{
//////////////////////////////////////////////////////////////////////////////////////////////////////
//	BLOCK 0 : BaseTexture RNG Extra (EXTR)
//////////////////////////////////////////////////////////////////////////////////////////////////////
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Get RNG Number (Entity Random)
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	// This scrolls fast through all the possible frames and stores the result in $checkMax

	AnimatedTexture				
	{
		animatedtexturevar 			"$basetexture" 
		animatedtextureframenumvar		"$checkMax"	
		animatedtextureframerate		"25"
	}

	// This stores $checkMax in $maxFrame only if $checkMax is bigger than $maxFrame
	// As a result, $maxFrame will be equal to the highest frame of the VTF

	LessOrEqual
	{
		LessEqualVar 	"$maxFrame"
		greaterVar 	"$checkMax"
		srcVar1 		"$checkMax"
		srcVar2 		"$maxFrame"
		resultVar 		"$maxFrame"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$one"
		greaterVar 	"$countingFinished"
		srcVar1 		"$checkMax"
		srcVar2 		"$zero"
		resultVar 		"$countingFinished"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$zero"
		greaterVar 	"$countingFinished"
		srcVar1 		"$maxFrame"
		srcVar2 		"$zero"
		resultVar 		"$countingFinished"    
	}

	// When $checkMax is not higher than $maxFrame, it means the AnimatedTexture proxy returned to 0
	// This means the code finished counting what the max $frame is. Therefore, we can now inject the result.

	Add		
	{
		srcVar1 		"$maxFrame"
		srcVar2 		"$one"
		resultVar 		"$maxFramePlusOne"
	}

	Divide	
	{
		srcVar1 		"$randOffset"
		srcVar2 		"$ten"
		resultVar 		"$randOffsetDIV"
	}

	Divide
	{
		srcVar1 		"$randOffsetDIV"
		srcVar2 		"$maxFramePlusOne"
		resultVar 		"$tempDIV"    
	}

	Frac
	{
		srcVar1 		"$tempDIV"
		resultVar 		"$tempDIV"    
	}

	Multiply
	{
		srcVar1 		"$tempDIV"
		srcVar2 		"$maxFramePlusOne"
		resultVar 		"$tempDIV"    
	}

	Add
	{
		srcVar1 		"$tempDIV"
		srcVar2 		"$roundOffset"
		resultVar 		"$randOffsetDIV"    
	}

	EntityRandom
	{
          	 	scale		"$maxFramePlusOne"         
          	 	resultVar 		"$randEXTR"  
	}

	Add
	{
		srcVar1 		"$randEXTR"
		srcVar2 		"$randOffsetDIV"
		resultVar 		"$randEXTR"    
	}

	Subtract
	{
		srcVar1 		"$randEXTR"
		srcVar2 		"$maxFramePlusOne"
		resultVar 		"$randEXTROverflow"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$randEXTR"
		greaterVar 	"$randEXTROverflow"
		srcVar1 		"$randEXTR"
		srcVar2 		"$maxFramePlusOne"
		resultVar 		"$randEXTR"    
	}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Get unique frame for "One RNG per map" (True RNG)
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	// When the counting is finished, the code injects the ''final'' $randSYS in $prepareStore

	LessOrEqual
	{
		LessEqualVar 	"$prepareStore"
		greaterVar 	"$randEXTR"
		srcVar1 		"$countingFinished"
		srcVar2 		"$zero"
		resultVar 		"$prepareStore"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$randEXTRStored"
		greaterVar 	"$prepareStore"
		srcVar1 		"$randEXTRStored"
		srcVar2 		"$fh"
		resultVar 		"$randEXTRStored"    
	}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Get unique frame for "One RNG per map" (True RNG)
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	LessOrEqual
	{
		LessEqualVar 	"$randEXTR"
		greaterVar 	"$randEXTRStored"
		srcVar1 		"$oneSkinPerMap"
		srcVar2 		"$zero"
		resultVar 		"$randEXTRInject"    
	}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Injector for BaseTexture
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


	Multiply			
	{
		srcVar1 		"$countingFinished"
		srcVar2 		"$randEXTRInject"
		resultVar 		"$injectEXTR"    
	}

	Multiply
	{
		srcVar1 		"$injectEXTR"
		srcVar2 		"$activateEXTR"
		resultVar 		"$RNGframeEXTR"    
	}

//////////////////////////////////////////////////////////////////////////////////////////////////////
//	BLOCK 1 : COLOR RNG PREPARE
//////////////////////////////////////////////////////////////////////////////////////////////////////
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Get RNG Number (Entity Random)
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// ------------------------------------------------------------------------------ Reroll RNG Small Block START

	ConVar			
	{
		convar		"cl_buy_favorite_nowarn"
		resultVar		"$rerollRaw"
	}

	Int
	{
		srcVar1 		"$rerollRaw"
		resultVar 		"$rerollRaw"    
	}

	Subtract
	{
		srcVar1 		"$rerollRaw"
		srcVar2 		"$rerollRawStored"
		resultVar 		"$rerollRNG"    
	}

	Abs
	{
		srcVar1		"$rerollRNG"
		resultVar		"$rerollRNG"	
	}

	Equals
	{
		srcVar1 		"$rerollRaw"
		resultVar 		"$rerollRawStored"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$randOffset"
		greaterVar 	"$ot"
		srcVar1 		"$rerollRNG"
		srcVar2 		"$zero"
		resultVar 		"$randOffset"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$randSYSStored"
		greaterVar 	"$zero"
		srcVar1 		"$rerollRNG"
		srcVar2 		"$zero"
		resultVar 		"$randSYSStored"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$randEXTRStored"
		greaterVar 	"$ot"
		srcVar1 		"$rerollRNG"
		srcVar2 		"$zero"
		resultVar 		"$randEXTRStored"    
	}



// ------------------------------------------------------------------------------ Reroll RNG Small Block END

	LinearRamp
	{
          	 	rate		"10"         
          	 	resultVar 		"$ramp"  
	}

	Int		
	{
		srcVar1 		"$ramp"
		resultVar 		"$ramp"    
	}

	Divide
	{
		srcVar1 		"$ramp"
		srcVar2 		"$ot"
		resultVar 		"$tempDIV"    
	}

	Frac
	{
		srcVar1 		"$tempDIV"
		resultVar 		"$tempDIV"    
	}

	Multiply
	{
		srcVar1 		"$tempDIV"
		srcVar2 		"$ot"
		resultVar 		"$tempDIV"    
	}

	Add
	{
		srcVar1 		"$tempDIV"
		srcVar2 		"$roundOffset"
		resultVar 		"$tempDIV"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$randOffset"
		greaterVar 	"$tempDIV"
		srcVar1 		"$randOffset"
		srcVar2 		"$nnn"
		resultVar 		"$randOffset"    
	}

	EntityRandom
	{
          	 	scale		"999"         
          	 	resultVar 		"$randSYSTemp"  
	}

	Add
	{
		srcVar1		"$randSYSTemp"
		srcVar2 		"$randOffset"
		resultVar		"$randSYSTemp"	
	}

	Subtract
	{
		srcVar1		"$randSYSTemp"
		srcVar2 		"$ot"
		resultVar		"$randSYSOverflow"	
	}

	LessOrEqual
	{
		LessEqualVar 	"$randSYSTemp"
		greaterVar 	"$randSYSOverflow"
		srcVar1 		"$randSYSTemp"
		srcVar2 		"$ot"
		resultVar 		"$randSYS"    
	}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Get unique color for "One RNG per map" (True RNG)
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	LessOrEqual
	{
		LessEqualVar 	"$randSYS"
		greaterVar 	"$randSYSStored"
		srcVar1 		"$randSYSStored"
		srcVar2 		"$zero"
		resultVar 		"$randSYSStored"    
	}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Get unique color for "One RNG per map" (True RNG)
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		
	// This determines the final number if RNG is used and not SYS. It stores it into $randSYSInject
	// The code picks $randSYSStored if the user chose one skin per map, and otherwise $randSYS

	LessOrEqual
	{
		LessEqualVar 	"$randSYS"
		greaterVar 	"$randSYSStored"
		srcVar1 		"$oneSkinPerMap"
		srcVar2 		"$zero"
		resultVar 		"$randSYSInject"    
	}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Determine the final RNG number
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	// If the model is a carried entity ($randSYSInject == 0), do not inject but keep the old $RNGinjectFrame

	LessOrEqual
	{
		LessEqualVar 	"$RNGinjectColor"
		greaterVar 	"$randSYSInject"
		srcVar1 		"$randSYS"
		srcVar2 		"$zero"
		resultVar 		"$RNGinjectColor"    
	}

	Add
	{
		srcVar1 		"$RNGinjectColor"
		srcVar2 		"$VMTColorOffset"
		resultVar 		"$RNGinjectColor"    
	}

//////////////////////////////////////////////////////////////////////////////////////////////////////
//	BLOCK 2 : DATA RETRIEVE
//////////////////////////////////////////////////////////////////////////////////////////////////////
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Retrive slots
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	// The data about what skin is in use is stored in the Joystick Controls
	// This disables the use of a controller for L4D2 (but who uses a Controller for a FPS anyway)
	// This was because the controllers variables are plentyful and not that essential, while still...
	// ... being not reset when the game restarts. Declaring custom variables is not possible since
	// "The Last Stand" update, therefore, this was the only option for this stuff to work.

	// This retrieves the master toggle (On/Off) value, that is stored in cl_buy_favorite_quiet

	ConVar			
	{
		convar		"cl_buy_favorite_quiet"
		resultVar		"$masterToggle"
	}

	Int
	{
		srcVar1 		"$masterToggle"
		resultVar 		"$masterToggle"    
	}

	// This retrieves the other values for the skins, that are stored in the Joystick parameters

	ConVar			
	{
		convar		"budget_background_alpha"
		resultVar		"$slot1"
	}

	ConVar			
	{
		convar		"budget_bargraph_background_alpha"
		resultVar		"$slot2"
	}

	ConVar			
	{
		convar		"budget_panel_height"
		resultVar		"$slot3"
	}

	ConVar			
	{
		convar		"budget_panel_width"
		resultVar		"$slot4"
	}

	ConVar			
	{
		convar		"budget_panel_x"
		resultVar		"$slot5"
	}

	ConVar			
	{
		convar		"budget_panel_y"
		resultVar		"$slot6"
	}

	ConVar			
	{
		convar		"budget_show_history"
		resultVar		"$slot7"
	}

	ConVar			
	{
		convar		"budget_show_peaks"
		resultVar		"$slot8"
	}

	ConVar			
	{
		convar		"hud_classautokill"
		resultVar		"$slot9"
	}

	ConVar			
	{
		convar		"sc_pitch_sensitivity"
		resultVar		"$slot10"
	}

	ConVar			
	{
		convar		"sc_pitch_sensitivity2"
		resultVar		"$slot11"
	}

	ConVar			
	{
		convar		"sc_yaw_sensitivity"
		resultVar		"$slot12"
	}

	ConVar			
	{
		convar		"sc_yaw_sensitivity2"
		resultVar		"$slot13"
	}

	ConVar			
	{
		convar		"sc_mouse_sensitivity"
		resultVar		"$slot14"
	}

	ConVar			
	{
		convar		"sc_mouse_sensitivity2"
		resultVar		"$slot15"
	}

	ConVar			
	{
		convar		"sc_debug_sets"
		resultVar		"$slot16"
	}


	ConVar			
	{
		convar		"npc_height_adjust"
		resultVar		"$slot17"
	}

	ConVar			
	{
		convar		"overview_alpha"
		resultVar		"$slot18"
	}

	ConVar			
	{
		convar		"overview_health"
		resultVar		"$slot19"
	}

	ConVar			
	{
		convar		"overview_locked"
		resultVar		"$slot20"
	}

	ConVar			
	{
		convar		"overview_names"
		resultVar		"$slot21"
	}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Retrive slots
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	// This is where the code retrieves the correct data from the slots depending on the slot
	// that the modder chose ($slotUsed). Sadly, a for loop is impossible in Proxies, so all the
	// possibilities have to be manually checked with basic if-else conditions...

	LessOrEqual
	{
		LessEqualVar 	"$zero"
		greaterVar 	"$slot1"
		srcVar1 		"$slotUsed"
		srcVar2 		"$zero"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot2"
		srcVar1 		"$slotUsed"
		srcVar2 		"$one"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot3"
		srcVar1 		"$slotUsed"
		srcVar2 		"$two"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot4"
		srcVar1 		"$slotUsed"
		srcVar2 		"$three"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot5"
		srcVar1 		"$slotUsed"
		srcVar2 		"$four"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot6"
		srcVar1 		"$slotUsed"
		srcVar2 		"$five"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot7"
		srcVar1 		"$slotUsed"
		srcVar2 		"$six"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot8"
		srcVar1 		"$slotUsed"
		srcVar2 		"$seven"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot9"
		srcVar1 		"$slotUsed"
		srcVar2 		"$eight"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot10"
		srcVar1 		"$slotUsed"
		srcVar2 		"$nine"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot11"
		srcVar1 		"$slotUsed"
		srcVar2 		"$ten"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot12"
		srcVar1 		"$slotUsed"
		srcVar2 		"$eleven"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot13"
		srcVar1 		"$slotUsed"
		srcVar2 		"$twelve"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot14"
		srcVar1 		"$slotUsed"
		srcVar2 		"$thirteen"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot15"
		srcVar1 		"$slotUsed"
		srcVar2 		"$fourteen"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot16"
		srcVar1 		"$slotUsed"
		srcVar2 		"$fifteen"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot17"
		srcVar1 		"$slotUsed"
		srcVar2 		"$sixteen"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot18"
		srcVar1 		"$slotUsed"
		srcVar2 		"$seventeen"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot19"
		srcVar1 		"$slotUsed"
		srcVar2 		"$eighteen"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot20"
		srcVar1 		"$slotUsed"
		srcVar2 		"$nineteen"
		resultVar 		"$blockRawData"    
	}

	LessOrEqual
	{
		LessEqualVar 	"$blockRawData"
		greaterVar 	"$slot21"
		srcVar1 		"$slotUsed"
		srcVar2 		"$twenty"
		resultVar 		"$blockRawData"    
	}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Retrive skin lock
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	Frac
	{
		srcVar1 		"$blockRawData"
		resultVar 		"$tempFRAC"    
	}

	Multiply
	{
		srcVar1 		"$tempFRAC"
		srcVar2 		"$oh"
		resultVar 		"$tempMULT"    
	}

	Int
	{
		srcVar1 		"$tempMULT"
		resultVar 		"$tempMULT"    
	}

	Divide
	{
		srcVar1 		"$tempMULT"
		srcVar2 		"$two"
		resultVar 		"$tempDIV"    
	}
	
	Frac
	{
		srcVar1 		"$tempDIV"
		resultVar 		"$tempDIV"    
	}

	Multiply
	{
		srcVar1 		"$tempDIV"
		srcVar2 		"$two"
		resultVar 		"$forceSYS"    
	}


//////////////////////////////////////////////////////////////////////////////////////////////////////
//	BLOCK 3 : SYS SKIN
//////////////////////////////////////////////////////////////////////////////////////////////////////

	// For Color RNG, it is possible to directly inject the RawData from 0 to 1,000,000,000. The code will later convert that to a color.

	Add
	{
		srcVar1 		"$blockRawData"	
		srcVar2 		"$VMTColorOffset"
		resultVar 		"$SYSInjectColor"		// GLOBAL FINAL RESULT SENT TO THE SWITCHER
	}


	Divide
	{
		srcVar1 		"$blockRawData"
		srcVar2 		"$maxFramePlusOne"
		resultVar 		"$tempDIV"    
	}

	Frac
	{
		srcVar1 		"$tempDIV"
		resultVar 		"$tempDIV"    
	}

	Multiply
	{
		srcVar1 		"$tempDIV"
		srcVar2 		"$maxFramePlusOne"
		resultVar 		"$tempMULT"    
	}

	Add
	{
		srcVar1 		"$tempMULT"	
		srcVar2 		"$zero"
		resultVar 		"$SYSInjectFrame"		// GLOBAL FINAL RESULT SENT TO THE SWITCHER
	}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	Multiply			// Multiply Raw Data (Color Speed Change)
	{
		srcVar1 		"$blockRawData"
		srcVar2 		"$speedColorFactor"
		resultVar 		"$blockRawData"
	}


//////////////////////////////////////////////////////////////////////////////////////////////////////
//	BLOCK 4 : INJECTOR
//////////////////////////////////////////////////////////////////////////////////////////////////////

	// This part takes the last 3 digits of the $CHOSENinjectColor. 
	// The last digit (divided by then) is for reds, the second to last for blues, and the third to last for greens
	// This means there is 999 possible colors, from 0 0 0 to 9 9 9, in that order.


// -- COLOR

	LessOrEqual		
	{
		LessEqualVar 	"$RNGinjectColor"
		greaterVar 	"$SYSinjectColor"
		srcVar1 		"$masterToggle"
		srcVar2 		"$zero"
		resultVar 		"$CHOSENinjectColor"
	}

	LessOrEqual
	{
		LessEqualVar 	"$RNGinjectColor"
		greaterVar 	"$CHOSENinjectColor"
		srcVar1 		"$slotUsed"
		srcVar2 		"$zero"
		resultVar 		"$CHOSENinjectColor"
	}

	LessOrEqual		// Forces SYS if slot has been locked by user
	{
		LessEqualVar 	"$CHOSENinjectColor"	// Warning : Inverted
		greaterVar 	"$SYSinjectColor"		// Warning : Inverted
		srcVar1 		"$forceSYS"
		srcVar2 		"$zero"
		resultVar 		"$CHOSENinjectColor"
	}

// -- FRAME

	LessOrEqual		
	{
		LessEqualVar 	"$RNGframeEXTR"
		greaterVar 	"$SYSinjectFrame"
		srcVar1 		"$masterToggle"
		srcVar2 		"$zero"
		resultVar 		"$CHOSENinjectFrame"
	}

	LessOrEqual
	{
		LessEqualVar 	"$RNGframeEXTR"
		greaterVar 	"$CHOSENinjectFrame"
		srcVar1 		"$slotUsedFrame"
		srcVar2 		"$zero"
		resultVar 		"$CHOSENinjectFrame"
	}

	LessOrEqual		// Forces SYS if slot has been locked by user
	{
		LessEqualVar 	"$CHOSENinjectFrame"	// Warning : Inverted
		greaterVar 	"$SYSinjectFrame"		// Warning : Inverted
		srcVar1 		"$forceSYS"
		srcVar2 		"$zero"
		resultVar 		"$CHOSENinjectFrame"	
	}

	Equals
	{
		srcVar1 		"$CHOSENinjectFrame"
		resultVar 		"$frame"			// $frame injection here
	}

	LessOrEqual		// Safety to Force $frame to always be among possible values
	{
		LessEqualVar 	"$frame"
		greaterVar 	"$maxframe"
		srcVar1 		"$frame"
		srcVar2 		"$maxframe"
		resultVar 		"$frame"
	}

	Divide
	{
		srcVar1 		"$CHOSENinjectColor"
		srcVar2 		"$ten"
		resultVar 		"$colorReds"
	}

	Divide
	{
		srcVar1 		"$CHOSENinjectColor"
		srcVar2 		"$oh"
		resultVar 		"$colorGreens"
	}

	Divide
	{
		srcVar1 		"$CHOSENinjectColor"
		srcVar2 		"$ot"
		resultVar 		"$colorBlues"
	}

	Frac
	{
		srcVar1 		"$colorReds"
		resultVar 		"$colorReds"
	}

	Frac
	{
		srcVar1 		"$colorBlues"
		resultVar 		"$colorBlues"
	}

	Frac
	{
		srcVar1 		"$colorGreens"
		resultVar 		"$colorGreens"
	}

	Multiply
	{
		srcVar1 		"$colorReds"
		srcVar2 		"$ten"
		resultVar 		"$colorReds"
	}

	Multiply
	{
		srcVar1 		"$colorGreens"
		srcVar2 		"$ten"
		resultVar 		"$colorGreens"
	}

	Multiply
	{
		srcVar1 		"$colorBlues"
		srcVar2 		"$ten"
		resultVar 		"$colorBlues"
	}

	Int
	{
		srcVar1 		"$colorReds"
		resultVar 		"$colorReds"
	}

	Int
	{
		srcVar1 		"$colorBlues"
		resultVar 		"$colorBlues"
	}

	Int
	{
		srcVar1 		"$colorGreens"
		resultVar 		"$colorGreens"
	}

	Divide						// Color injection here
	{
		srcVar1 		"$colorReds"
		srcVar2 		"$ten"
		resultVar 		"$color[0]"
	}

	Divide
	{
		srcVar1 		"$colorGreens"
		srcVar2 		"$ten"
		resultVar 		"$color[1]"
	}

	Divide
	{
		srcVar1 		"$colorBlues"
		srcVar2 		"$ten"
		resultVar 		"$color[2]"
	}

	// --- Force OG Color if Color RNG Deactivated

	Add
	{
		srcVar1 		"$activateColorRNG"
		srcVar2 		"$masterToggle"
		resultVar 		"$keepColorCheck"
	}

	Add
	{
		srcVar1 		"$forceSYS"
		srcVar2 		"$keepColorCheck"
		resultVar 		"$keepColorCheck"
	}

	LessOrEqual
	{
		LessEqualVar 	"$originalColor" 
		greaterVar 	"$color"
		srcVar1		"$keepColorCheck"
		srcVar2		"$zero"
		resultVar		"$color"
	}

//////////////////////////////////////////////////////////////////////////////////////////////////////
//	BLOCK 5 : REALISTIC DAMAGE
//////////////////////////////////////////////////////////////////////////////////////////////////////

	EntityRandom
	{
          	 	scale		"359"         
          	 	resultVar 		"$isEntity"  
	}

	TextureTransform
	{
		centerVar		"$CenterDET"
		scaleVar		"$ScaleBlood"
		rotateVar		"$isEntity"
		translateVar	"$isEntity"
		resultVar		"$detailtexturetransform"
	}

        	PlayerPosition
        	{
                	scale                    	1
                	resultVar               	"$pos"
        	}

        	Clamp
        	{
		srcVar1		"$zero"
		min		"$pos[0]"
		max		"$pos[0]"
		resultVar		"$posX"	
        	}

        	Clamp
        	{
		srcVar1		"$zero"
		min		"$pos[1]"
		max		"$pos[1]"
		resultVar		"$posY"	
        	}

	Abs
	{
		srcVar1		"$posX"
		resultVar		"$posX"	
	}

	Abs
	{
		srcVar1		"$posY"
		resultVar		"$posY"	
	}	

	LessOrEqual
	{
		LessEqualVar 	"$posX" 
		greaterVar 	"$posXStored"
		srcVar1		"$posXStored"
		srcVar2		"$zero"
		resultVar		"$posXStored"
	}


	LessOrEqual
	{
		LessEqualVar 	"$posY" 
		greaterVar 	"$posYStored"
		srcVar1		"$posYStored"
		srcVar2		"$zero"
		resultVar		"$posYStored"
	}

	Subtract
	{
		srcVar1		"$posXStored"
		srcVar2		"$posX"
		resultVar		"$posXDELTA"
	}

	Subtract
	{
		srcVar1		"$posYStored"
		srcVar2		"$posY"
		resultVar		"$posYDELTA"
	}

        	Abs
        	{
		srcVar1		"$posXDELTA"
		resultVar		"$posXDELTA"	
        	}

        	Abs
        	{
		srcVar1		"$posYDELTA"
		resultVar		"$posYDELTA"	
        	}


	LessOrEqual
	{
		LessEqualVar 	"$one" 
		greaterVar 	"$zero"
		srcVar1		"$posXDELTA"
		srcVar2		"$posTOLERANCE"
		resultVar		"$isNearTheStart"
	}

	LessOrEqual
	{
		LessEqualVar 	"$isNearTheStart" 
		greaterVar 	"$zero"
		srcVar1		"$posYDELTA"
		srcVar2		"$posTOLERANCE"
		resultVar		"$isNearTheStart"
	}

	Health
	{
		scale 		"$oh" 
		resultVar 		"$healthCurrent"
	}

	LessOrEqual
	{
		LessEqualVar 	"$one" 
		greaterVar 	"$zero"
		srcVar1		"$healthCurrent"
		srcVar2		"$zero"
		resultVar		"$noInjectWorstHealth"
	}

	LessOrEqual
	{
		LessEqualVar 	"$healthCurrent" 
		greaterVar 	"$worstHealth"
		srcVar1		"$healthCurrent"
		srcVar2		"$worstHealth"
		resultVar		"$worstHealthToInject"
	}

	LessOrEqual
	{
		LessEqualVar 	"$worstHealthToInject" 
		greaterVar 	"$worstHealth"
		srcVar1		"$noInjectWorstHealth"
		srcVar2		"$zero"
		resultVar		"$worstHealth"
	}

	EntitySpeed
	{
		resultVar		"$ismoving" 
	}	

	PlayerSpeed
	{
		resultVar		"$playerSpeed"
	}


	LessOrEqual
	{
		LessEqualVar 	"$hasTakenDamage" 
		greaterVar 	"$zero"
		srcVar1		"$healthCurrent"
		srcVar2		"$oh"
		resultVar		"$hasTakenDamage"
	}
				
	LessOrEqual
	{
		LessEqualVar 	"$hasTakenDamage" 
		greaterVar 	"$one"
		srcVar1		"$oh"
		srcVar2		"$worstHealth"
		resultVar		"$hasTakenDamage"
	}	

	LessOrEqual
	{
		LessEqualVar 	"$one" 
		greaterVar 	"$zero"
		srcVar1		"$oh"
		srcVar2		"$healthCurrent"
		resultVar		"$mapRestartTPK"
	}

	LessOrEqual
	{
		LessEqualVar 	"$zero" 
		greaterVar 	"$mapRestartTPK"
		srcVar1		"$isNearTheStart"
		srcVar2		"$zero"
		resultVar		"$mapRestartTPK"
	}

	LessOrEqual
	{
		LessEqualVar 	"$zero" 
		greaterVar 	"$mapRestartTPK"
		srcVar1		"$ramp"				/// CHANGED
		srcVar2		"$ot"				/// CHANGED
		resultVar		"$mapRestartTPK"
	}

	LessOrEqual		
	{
		LessEqualVar 	"$worstHealth" 
		greaterVar 	"$oh"
		srcVar1		"$mapRestartTPK"
		srcVar2		"$zero"
		resultVar		"$worstHealth"
	}

	LessOrEqual		
	{
		LessEqualVar 	"$hasTakenDamage" 
		greaterVar 	"$zero"
		srcVar1		"$mapRestartTPK"
		srcVar2		"$zero"
		resultVar		"$hasTakenDamage"
	}

	LessOrEqual
	{
		LessEqualVar 	"$healthCurrent" 
		greaterVar 	"$worstHealth"
		srcVar1		"$canOnlyGetWorse"
		srcVar2		"$zero"
		resultVar		"$healthPercent"
	}

	Divide
	{
		srcVar1		"$healthPercent"
		srcVar2		"$oh"
		resultVar		"$dbftoInvert"
	}

	Subtract
	{
		srcVar1		"$one"
		srcVar2		"$dbftoInvert"
		resultVar		"$dbftodisplay"
	}
	
	LessOrEqual
	{
		LessEqualVar 	"$isdown" 
		greaterVar 	"$zero"
		srcVar1		"$playerSpeed"
		srcVar2		"$zero"
		resultVar		"$isdown"
	}			

	LessOrEqual
	{

		LessEqualVar 	"$hasTakenDamage" 
		greaterVar 	"$isdown"
		srcVar1		"$oh"
		srcVar2		"$healthCurrent"
		resultVar		"$isdown"
	}		

	LessOrEqual
	{
		LessEqualVar 	"$mustHeal" 
		greaterVar 	"$one"
		srcVar1		"$isdown"
		srcVar2		"$zero"
		resultVar		"$mustHeal"
	}	

	LessOrEqual
	{
		LessEqualVar 	"$mustHeal" 
		greaterVar 	"$zero"
		srcVar1		"$ismoving"
		srcVar2		"$zero"
		resultVar		"$mustHeal"
	}

	LessOrEqual
	{
		LessEqualVar 	"$isdown" 
		greaterVar 	"$one"
		srcVar1		"$mustHeal"
		srcVar2		"$zero"
		resultVar		"$isdown"
	}			

	LessOrEqual
	{			
		LessEqualVar 	"$isdown" 
		greaterVar 	"$zero"
		srcVar1		"$mapRestartTPK"
		srcVar2		"$zero"
		resultVar		"$isdown"
	}	

	LessOrEqual
	{
		LessEqualVar 	"$isdown" 
		greaterVar 	"$zero"
		srcVar1		"$ismoving"
		srcVar2		"$zero"
		resultVar		"$isdown"
	}

	LessOrEqual
	{
		LessEqualVar 	"$dbftodisplay" 
		greaterVar 	"$detailblendfactor"
		srcVar1		"$isdown"
		srcVar2		"$zero"
		resultVar		"$dbftoinject"
	}		

	Multiply
	{
		srcVar1		"$dbftoinject"
		srcVar2		"$six"
		resultVar		"$dbftoinject"
	}

	Subtract
	{
		srcVar1		"$dbftoinject"
		srcVar2		"$four"
		resultVar		"$dbftoinject"
	}

	LessOrEqual
	{
		LessEqualVar 	"$zero" 
		greaterVar 	"$dbftoinject"
		srcVar1		"$dbftoinject"
		srcVar2		"$zero"
		resultVar		"$dbftoinject"
	}

	LessOrEqual
	{
		LessEqualVar 	"$dbftoinject" 
		greaterVar 	"$one"
		srcVar1		"$dbftoinject"
		srcVar2		"$one"
		resultVar		"$dbftoinject"
	}

	LessOrEqual
	{
		LessEqualVar 	"$detailblendfactor" 
		greaterVar 	"$dbftoinject"
		srcVar1		"$isEntity"
		srcVar2		"$zero"
		resultVar		"$detailblendfactor"		// THIS IS THE FINAL INJECTION OF $DETAILBLENDFACTOR
	}


}

}
